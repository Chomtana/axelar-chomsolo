{
  "address": "0x3F0184acC8ac3f1c74dcCd78fA851B25AA3638c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x375ffdbf7933bab47195096387ec1d7d665b8adb0a065a85547b3a26ec8fccb1",
  "receipt": {
    "to": null,
    "from": "0xca16aD18c702B90f3cfdDbD12FC55261A8aC32aD",
    "contractAddress": "0x3F0184acC8ac3f1c74dcCd78fA851B25AA3638c2",
    "transactionIndex": 4,
    "gasUsed": "510468",
    "logsBloom": "0x
    "blockHash": "0x5569d0d931afaa2918ecb2a1930f3ca029be1c9b7fe3540c08eee25fbd416b92",
    "transactionHash": "0x375ffdbf7933bab47195096387ec1d7d665b8adb0a065a85547b3a26ec8fccb1",
    "logs": [],
    "blockNumber": 7740050,
    "cumulativeGasUsed": "5533711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      50000000,
      10000000,
      5000000,
      3000000,
      1000000
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "a89b1dd9b9519b30eaba943a61b831bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracleUSD.sol\":\"StablePriceOracleUSD\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    struct Price {\\r\\n        uint256 base;\\r\\n        uint256 premium;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the price to register or renew a name.\\r\\n     * @param name The name being registered or renewed.\\r\\n     * @param expires When the name presently expires (0 if this is a new registration).\\r\\n     * @param duration How long the name is being registered or extended for, in seconds.\\r\\n     * @return base premium tuple of base price + premium price\\r\\n     */\\r\\n    function price(\\r\\n        string calldata name,\\r\\n        uint256 expires,\\r\\n        uint256 duration\\r\\n    ) external view returns (Price calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x2284fa2fee843161bb68ba58864a8ff2f4048f33651011ad32ee64d31c87a117\",\"license\":\"MIT\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n     * reverts when dividing by zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x612e1aa90a6cd606b01d3eb489e9ae70865874d0e9a0c16aa8989dbeae7e7cff\",\"license\":\"MIT\"},\"contracts/ethregistrar/StablePriceOracleUSD.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport \\\"./IPriceOracle.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./StringUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\\r\\n// StablePriceOracle sets a price in USD, based on an oracle.\\r\\ncontract StablePriceOracleUSD is IPriceOracle {\\r\\n    using SafeMath for *;\\r\\n    using StringUtils for *;\\r\\n\\r\\n    // Rent in base price units by length\\r\\n    uint256 public immutable price1Letter;\\r\\n    uint256 public immutable price2Letter;\\r\\n    uint256 public immutable price3Letter;\\r\\n    uint256 public immutable price4Letter;\\r\\n    uint256 public immutable price5Letter;\\r\\n\\r\\n    event RentPriceChanged(uint256[] prices);\\r\\n\\r\\n    constructor(uint256[] memory _rentPrices) {\\r\\n        price1Letter = _rentPrices[0];\\r\\n        price2Letter = _rentPrices[1];\\r\\n        price3Letter = _rentPrices[2];\\r\\n        price4Letter = _rentPrices[3];\\r\\n        price5Letter = _rentPrices[4];\\r\\n    }\\r\\n\\r\\n    function price(\\r\\n        string calldata name,\\r\\n        uint256 expires,\\r\\n        uint256 duration\\r\\n    ) external view override returns (IPriceOracle.Price memory) {\\r\\n        uint256 len = name.strlen();\\r\\n        uint256 basePrice;\\r\\n\\r\\n        if (len >= 5) {\\r\\n            basePrice = price5Letter * duration;\\r\\n        } else if (len == 4) {\\r\\n            basePrice = price4Letter * duration;\\r\\n        } else if (len == 3) {\\r\\n            basePrice = price3Letter * duration;\\r\\n        } else if (len == 2) {\\r\\n            basePrice = price2Letter * duration;\\r\\n        } else {\\r\\n            basePrice = price1Letter * duration;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            IPriceOracle.Price({\\r\\n                base: attoUSDToWei(basePrice),\\r\\n                premium: attoUSDToWei(_premium(name, expires, duration))\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the pricing premium in wei.\\r\\n     */\\r\\n    function premium(\\r\\n        string calldata name,\\r\\n        uint256 expires,\\r\\n        uint256 duration\\r\\n    ) external view returns (uint256) {\\r\\n        return attoUSDToWei(_premium(name, expires, duration));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the pricing premium in internal base units.\\r\\n     */\\r\\n    function _premium(\\r\\n        string memory name,\\r\\n        uint256 expires,\\r\\n        uint256 duration\\r\\n    ) internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IPriceOracle).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e2337fb0b0778d2beb0c087b93c801b8000ecd2f7bb16c33f6c39b8e8487b6c\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nlibrary StringUtils {\\r\\n    /**\\r\\n     * @dev Returns the length of a given string\\r\\n     *\\r\\n     * @param s The string to measure the length of\\r\\n     * @return The length of the input string\\r\\n     */\\r\\n    function strlen(string memory s) internal pure returns (uint256) {\\r\\n        uint256 len;\\r\\n        uint256 i = 0;\\r\\n        uint256 bytelength = bytes(s).length;\\r\\n        for (len = 0; i < bytelength; len++) {\\r\\n            bytes1 b = bytes(s)[i];\\r\\n            if (b < 0x80) {\\r\\n                i += 1;\\r\\n            } else if (b < 0xE0) {\\r\\n                i += 2;\\r\\n            } else if (b < 0xF0) {\\r\\n                i += 3;\\r\\n            } else if (b < 0xF8) {\\r\\n                i += 4;\\r\\n            } else if (b < 0xFC) {\\r\\n                i += 5;\\r\\n            } else {\\r\\n                i += 6;\\r\\n            }\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x424dbc316c1ad8b629d8a134c44e80d4dab63bcda2c07fe3772d9ede777fe65b\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162000a9338038062000a9383398101604081905262000035916200010c565b806000815181106200004b576200004b620001d5565b60200260200101516080818152505080600181518110620000705762000070620001d5565b602002602001015160a0818152505080600281518110620000955762000095620001d5565b602002602001015160c0818152505080600381518110620000ba57620000ba620001d5565b602002602001015160e0818152505080600481518110620000df57620000df620001d5565b6020026020010151610100818152505050620001eb565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200012057600080fd5b82516001600160401b03808211156200013857600080fd5b818501915085601f8301126200014d57600080fd5b815181811115620001625762000162620000f6565b8060051b604051601f19603f830116810181811085821117156200018a576200018a620000f6565b604052918252848201925083810185019188831115620001a957600080fd5b938501935b82851015620001c957845184529385019392850192620001ae565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e05161010051610841620002526000396000818161011d01526102c70152600081816101a50152610300015260008181610144015261033201526000818161017e015261036401526000818160ba015261038e01526108416000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a200e1531161005b578063a200e1531461013f578063a34e359614610166578063cd5d2c7414610179578063d820ed42146101a057600080fd5b806301ffc9a71461008d5780632c0fd74c146100b557806350e9a715146100ea57806359b6b86c14610118575b600080fd5b6100a061009b366004610683565b6101c7565b60405190151581526020015b60405180910390f35b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ac565b6100fd6100f83660046106cc565b610260565b604080518251815260209283015192810192909252016100ac565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc6101743660046106cc565b610422565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061025a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f50e9a71500000000000000000000000000000000000000000000000000000000145b92915050565b604080518082019091526000808252602082015260006102b586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047392505050565b90506000600582106102f2576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b90506103b5565b81600403610324576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b81600303610356576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b81600203610388576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b6103b2847f000000000000000000000000000000000000000000000000000000000000000061077a565b90505b60405180604001604052806103c78390565b81526020016104156104128a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915061067a9050565b90565b9052979650505050505050565b600061046a61041286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915061067a9050565b95945050505050565b8051600090819081905b8082101561067157600085838151811061049957610499610791565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f80000000000000000000000000000000000000000000000000000000000000008110156104fc576104f56001846107c0565b925061065e565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610551576104f56002846107c0565b7ff0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156105a6576104f56003846107c0565b7ff8000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156105fb576104f56004846107c0565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610650576104f56005846107c0565b61065b6006846107c0565b92505b5082610669816107d3565b93505061047d565b50909392505050565b60009392505050565b60006020828403121561069557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106c557600080fd5b9392505050565b600080600080606085870312156106e257600080fd5b843567ffffffffffffffff808211156106fa57600080fd5b818701915087601f83011261070e57600080fd5b81358181111561071d57600080fd5b88602082850101111561072f57600080fd5b6020928301999098509187013596604001359550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761025a5761025a61074b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8082018082111561025a5761025a61074b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108045761080461074b565b506001019056fea26469706673582212209010dcb0f02f7fe970073bd53924d2baf2428b09a9a93310ba032ed8bcc4f67264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a200e1531161005b578063a200e1531461013f578063a34e359614610166578063cd5d2c7414610179578063d820ed42146101a057600080fd5b806301ffc9a71461008d5780632c0fd74c146100b557806350e9a715146100ea57806359b6b86c14610118575b600080fd5b6100a061009b366004610683565b6101c7565b60405190151581526020015b60405180910390f35b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ac565b6100fd6100f83660046106cc565b610260565b604080518251815260209283015192810192909252016100ac565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc6101743660046106cc565b610422565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061025a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f50e9a71500000000000000000000000000000000000000000000000000000000145b92915050565b604080518082019091526000808252602082015260006102b586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047392505050565b90506000600582106102f2576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b90506103b5565b81600403610324576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b81600303610356576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b81600203610388576102eb847f000000000000000000000000000000000000000000000000000000000000000061077a565b6103b2847f000000000000000000000000000000000000000000000000000000000000000061077a565b90505b60405180604001604052806103c78390565b81526020016104156104128a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915061067a9050565b90565b9052979650505050505050565b600061046a61041286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915061067a9050565b95945050505050565b8051600090819081905b8082101561067157600085838151811061049957610499610791565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f80000000000000000000000000000000000000000000000000000000000000008110156104fc576104f56001846107c0565b925061065e565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610551576104f56002846107c0565b7ff0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156105a6576104f56003846107c0565b7ff8000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156105fb576104f56004846107c0565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610650576104f56005846107c0565b61065b6006846107c0565b92505b5082610669816107d3565b93505061047d565b50909392505050565b60009392505050565b60006020828403121561069557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106c557600080fd5b9392505050565b600080600080606085870312156106e257600080fd5b843567ffffffffffffffff808211156106fa57600080fd5b818701915087601f83011261070e57600080fd5b81358181111561071d57600080fd5b88602082850101111561072f57600080fd5b6020928301999098509187013596604001359550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761025a5761025a61074b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8082018082111561025a5761025a61074b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108045761080461074b565b506001019056fea26469706673582212209010dcb0f02f7fe970073bd53924d2baf2428b09a9a93310ba032ed8bcc4f67264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}